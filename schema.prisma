generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrgPlan {
  None
  Starter
  Team
  Professional
  Enterprise
}

model Org {
  orgId        String     @id
  orgName      String
  orgPlan      OrgPlan    @default(Starter)
  orgUsers     User[]
  orgSessions  Session[]
  orgEvents    EventLog[]
  orgProjects  Project[]
  orgWorkflows Workflow[]
  orgTeams     Team[]
}

enum UserRole {
  Owner // Can add / manage administrators and below
  Admin // Can add / manage devs and viewer
  Developer // Read + Write Access, Can Trigger Workflows
  Viewer // Read Access Only
}

model User {
  userId                 String                  @id @default(cuid(2))
  userFirstName          String
  userMail               String
  userPassword           String
  userRole               UserRole
  userLastName           String?
  userOrgId              String
  userVerified           Boolean                 @default(false)
  userOrg                Org                     @relation(fields: [userOrgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
  userTeams              UserTeams[]
  userProjects           ProjectUserAccess[]
  userSessions           Session[]
  userS3Requests         S3Request[]
  userEvents             EventLog[]
  userVerificationTokens UserVerificationToken[]
}

model UserVerificationToken {
  tokenId                  String   @id @default(cuid(2))
  verificationToken        String
  tokenExpirationTimestamp DateTime
  userId                   String
  targetUser               User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Session {
  sessionId             String           @id @default(cuid(2))
  sessionToken          String
  sessionIp             String
  sessionUA             String
  sessionStartTimestamp DateTime
  sessionEndTimestamp   DateTime
  userId                String
  sessionUser           User             @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  orgId                 String
  sessionOrg            Org              @relation(fields: [orgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
  sessionEvents         EventLog[]
  sessionXSRFTokens     CrossSiteToken[]
}

model CrossSiteToken {
  tokenId              String   @id @default(cuid(2))
  tokenHash            String
  tokenExpiryTimestamp DateTime
  tokenIp              String
  tokenUA              String
  tokenSessionId       String?
  tokenSession         Session? @relation(fields: [tokenSessionId], references: [sessionId], onDelete: Cascade, onUpdate: Cascade)

  @@index([tokenHash], type: Hash)
}

model Team {
  teamId       String              @id @default(cuid(2))
  teamName     String
  teamOrgId    String
  teamOrg      Org                 @relation(fields: [teamOrgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
  teamUsers    UserTeams[]
  teamProjects ProjectTeamAccess[]
}

model UserTeams {
  userId     String
  teamId     String
  linkedUser User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  linkedTeam Team   @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, teamId])
}

enum ProjectType {
  typescript
}

enum ProjectSourceType {
  GitHub
}

model Project {
  projectId         String              @id @default(cuid(2))
  // The project identifier on the VCS Platform (e.g GitHub: repo id)
  projectIdentifier String
  projectBranch     String
  projectEntryPoint String
  projectName       String
  projectOrgId      String
  projectType       ProjectType
  projectSourceType ProjectSourceType
  projectTeams      ProjectTeamAccess[]
  projectUsers      ProjectUserAccess[]
  projectOrg        Org                 @relation(fields: [projectOrgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
  projectWorkflows  Workflow[]
}

enum AccessLevel {
  Admin // Manage project settings
  Write // Read + Write, trigger workflows
  Read // Read-only, cannot trigger workflows
}

model ProjectTeamAccess {
  projectId     String
  teamId        String
  accessLevel   AccessLevel
  linkedProject Project     @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)
  linkedTeam    Team        @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: Cascade)

  @@id([projectId, teamId])
}

model ProjectUserAccess {
  projectId     String
  userId        String
  accessLevel   AccessLevel
  linkedProject Project     @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)
  linkedUser    User        @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@id([projectId, userId])
}

enum WorkflowStatus {
  Queued
  CloneStarted
  CloneFailed
  CloneCompleted
  DepGraphStarted
  DepGraphFailed
  DepGraphCompleted
  GraphUploadStarted
  GraphUploadFailed
  GraphUploadCompleted
  WorkflowCompleted
  // Once a workflow is completed, archive it.
  Archived
}

model Workflow {
  workflowId             String         @id @default(cuid(2))
  workflowStartTimestamp DateTime
  workflowEndTimestamp   DateTime?
  workflowStatus         WorkflowStatus
  workflowProjectId      String
  workflowOrgId          String
  workflowMetadata       Json
  workflowProject        Project        @relation(fields: [workflowProjectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)
  workflowOrg            Org            @relation(fields: [workflowOrgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
}

enum S3RequestMethod {
  GET
  PUT
  DELETE
}

enum S3RequestStatus {
  Pending
  Success
  Error
}

model S3Request {
  requestId                String          @id @default(cuid(2))
  requestObjectKey         String
  requestStatus            S3RequestStatus
  requestCreationTimestamp DateTime
  requestExpiryTimestamp   DateTime
  requestMethod            S3RequestMethod
  requestObjectSize        Int?
  requestObjectContentType String?
  requestObjectFileName    String?
  requestUserId            String?
  requestUser              User?           @relation(fields: [requestUserId], references: [userId], onDelete: Cascade)
}

model S3Object {
  objectKey         String @id
  objectFileName    String
  objectSizeBytes   Int
  objectContentType String
}

// Events and analytics
enum EventType {
  OrgCreate
  OrgUpdate
  UserCreate
  UserUpdate
  UserDelete
  AuthVerify
  AuthLogin
  ProjectCreate
  ProjectUpdate
  ProjectDelete
  ProjectTeamUpdate
  ProjectUserUpdate
  TeamCreate
  TeamUpdate
  TeamDelete
  TeamUserAdd
  TeamUserDelete
  SessionStart
  SessionClose
  S3RequestCreate
  S3ObjectCreate
  S3ObjectDelete
  S3RequestCallback
  VerificationMailSend
}

model EventLog {
  eventId        String    @id @default(cuid(2))
  eventTimestamp DateTime
  eventType      EventType
  userId         String?
  sessionId      String?
  orgId          String?
  eventAuth      User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  eventSession   Session?  @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  eventOrg       Org?      @relation(fields: [orgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
  // Postgres supports json
  eventMetadata  Json

  @@index([userId])
}
