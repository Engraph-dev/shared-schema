generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Org {
  orgId       String     @id
  orgName     String
  orgUsers    User[]
  orgSessions Session[]
  orgEvents   EventLog[]
}

enum UserRole {
  Owner // Can add / manage administrators and below
  Admin // Can add / manage devs and viewer
  Developer // Read + Write Access
  Viewer // Read Access Only
}

model User {
  userId                 String                  @id @default(cuid())
  userFirstName          String
  userMail               String
  userPassword           String
  userRole               UserRole
  userLastName           String?
  userOrgId              String
  userOrg                Org                     @relation(fields: [userOrgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
  userTeams              UserTeams[]
  userProjects           ProjectUserAccess[]
  userSessions           Session[]
  userS3Requests         S3Request[]
  userEvents             EventLog[]
  userVerificationTokens UserVerificationToken[]
}

model UserVerificationToken {
  tokenId                  String   @id @default(cuid())
  verificationToken        String
  tokenExpirationTimestamp DateTime
  userId                   String
  targetUser               User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Session {
  sessionId             String     @id @default(cuid())
  sessionToken          String
  sessionIp             String
  sessionUA             String
  sessionStartTimestamp DateTime
  sessionEndTimestamp   DateTime
  userId                String
  sessionUser           User       @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  orgId                 String
  sessionOrg            Org        @relation(fields: [orgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
  sessionEvents         EventLog[]
}

model Team {
  teamId       String              @id @default(cuid())
  teamName     String
  teamUsers    UserTeams[]
  teamProjects ProjectTeamAccess[]
}

model UserTeams {
  userId     String
  teamId     String
  linkedUser User   @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)
  linkedTeam Team   @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: Cascade)

  @@id([userId, teamId])
}

enum ProjectSourceType {
  GitHub
}

model Project {
  projectId         String              @id @default(cuid())
  projectName       String
  projectSourceType ProjectSourceType
  projectSourceUrl  String?
  projectTeams      ProjectTeamAccess[]
  projectUsers      ProjectUserAccess[]
}

enum AccessLevel {
  Admin // Manage project settings
  Write // Read + Write
  Read // Read-only
}

model ProjectTeamAccess {
  projectId     String
  teamId        String
  linkedProject Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)
  linkedTeam    Team    @relation(fields: [teamId], references: [teamId], onDelete: Cascade, onUpdate: Cascade)

  @@id([projectId, teamId])
}

model ProjectUserAccess {
  projectId     String
  userId        String
  linkedProject Project @relation(fields: [projectId], references: [projectId], onDelete: Cascade, onUpdate: Cascade)
  linkedUser    User    @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: Cascade)

  @@id([projectId, userId])
}

enum S3RequestMethod {
  GET
  PUT
  DELETE
}

enum S3RequestStatus {
  Pending
  Success
  Error
}

model S3Request {
  requestId                String          @id @default(cuid())
  requestObjectKey         String
  requestStatus            S3RequestStatus
  requestCreationTimestamp DateTime
  requestExpiryTimestamp   DateTime
  requestMethod            S3RequestMethod
  requestObjectSize        Int?
  requestObjectContentType String?
  requestObjectFileName    String?
  requestUserId            String?
  requestUser              User?           @relation(fields: [requestUserId], references: [userId], onDelete: Cascade)
}

model S3Object {
  objectKey         String @id
  objectFileName    String
  objectSizeBytes   Int
  objectContentType String
}

// Events and analytics
enum EventType {
  OrgCreate
  OrgUpdate
  UserCreate
  UserUpdate
  UserDelete
  ProjectCreate
  ProjectUpdate
  ProjectDelete
  TeamCreate
  TeamUpdate
  TeamDelete
  SessionStart
  SessionClose
  S3RequestCreate
  S3ObjectCreate
  S3ObjectDelete
  S3RequestCallback
  VerificationMailSend
}

model EventLog {
  eventId        String    @id @default(cuid())
  eventTimestamp DateTime
  eventType      EventType
  userId         String?
  sessionId      String?
  orgId          String?
  eventAuth      User?     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  eventSession   Session?  @relation(fields: [sessionId], references: [sessionId], onDelete: Cascade)
  eventOrg       Org?      @relation(fields: [orgId], references: [orgId], onDelete: Cascade, onUpdate: Cascade)
  // Postgres supports json
  eventMetadata  Json

  @@index([userId])
}
